import { {{TsValidatorImportsCode}} } from 'class-validator';
import { Type, plainToClass, instanceToPlain, Expose, Transform } from 'class-transformer';
{% if HasTsNestedValidator -%}
import { {{TsNestedValidatorImportsCode}} } from "./../helpers/class-validator";
{% endif -%}
{% if HasTsImports -%}
{% for Import in TsImports -%}
import { {{ Import.Name }} } from "{{ Import.From }}";
{% endfor -%}
{% endif -%}

{% if HasDescription -%}
/** {{ Description }} */
{% endif -%}
export {% if IsAbstract %}abstract {% endif %}class {{ ClassName }}{% if HasInheritance %} extends {{ Inheritance }}{% endif %} {
{% for property in Properties -%}
{%  if property.HasValidationDecorators -%}
{%  for decorator in property.ValidationDecorators -%}
    {{ decorator }}
{%  endfor -%}
{%  endif -%}
    @Expose({ name: "{{ property.TsJsonPropertyName }}" })
{%  if property.HasTransformDecorator -%}
    {{ property.TransformDecorator }}
{%  endif -%}
{%  if property.HasDescription -%}
    /** {{ property.Description }} */
{%  endif -%}
    {{ property.TsPropertyName }}{% if property.HasDefault == false %}{% if property.IsRequired %}!{% else %}?{% endif %}{% endif %}: {{ property.Type }}{{ property.TypePostfix }}{% if property.HasDefault %} = {{ property.DefaultCodeFormat | strip | tab }}{% endif -%};
	
{% endfor -%}

    constructor() {
{%      if HasInheritance -%}
        super();
{%      endif -%}
{% if HasProperties -%}
{%  for property in Properties -%}
{%      if property.HasDefault -%}
        this.{{ property.TsPropertyName }} = {{ property.DefaultCodeFormat | strip | tab }};
{%      endif -%}
{%  endfor -%}
{% endif -%}
    }


    {% if HasInheritance %}override {% endif %}init(_data?: any) {
{%      if HasInheritance -%}
        super.init(_data);
{%      endif -%}
{% if HasProperties and IsAbstract == false -%}
        if (_data) {
            const obj = plainToClass({{ ClassName }}, _data, { enableImplicitConversion: true, exposeUnsetFields: false, exposeDefaultValues: true });
{%      for property in Properties -%}
            {{ property.ConvertToClassCode | strip | tab }}
{%      endfor -%}
        }
{% endif -%}
    }


    static {% if HasInheritance %}override {% endif %}fromJS(data: any{% if HandleReferences %}, _mappings?: any{% endif %}): {{ ClassName }}{% if HandleReferences %} | null{% endif %} {
        data = typeof data === 'object' ? data : {};

{%     if IsAbstract -%}
        throw new Error("The abstract class '{{ ClassName }}' cannot be instantiated.");
{%     else -%}
        if (Array.isArray(data)) {
            const obj:any = {};
            for (var property in data) {
                obj[property] = data[property];
            }
            data = obj;
        }
        let result = new {{ ClassName }}();
        result.init(data);
        return result;
{%     endif -%}
    }

	{% if HasInheritance %}override {% endif %}toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
{% for property in Properties -%}
        {{ property.ConvertToJavaScriptCode | tab }}
{% endfor -%}
{% if HasInheritance -%}
        data = super.toJSON(data);
{% endif -%}
        return instanceToPlain(data, { exposeUnsetFields: false });
    }

	async validate(): Promise<boolean> {
        const errors = await validate(this);
        if (errors.length > 0){
			const errorMessages = errors.map((error: TsValidationError) => Object.values(error.constraints || [error]).join(', ')).join('; ');
      		throw new Error(`Validation failed: ${errorMessages}`);
		}
        return true;
    }
}
