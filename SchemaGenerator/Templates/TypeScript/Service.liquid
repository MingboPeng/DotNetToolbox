// Auto-generated
import { executeCSharp } from "@pollination/browser-message-handler";
{% if HasTsImports -%}
{% for Import in TsImports -%}
import { {{ Import.Name }} } from "{{ Import.From }}";
{% endfor -%}
{% endif -%}

export class {{ClassName}} {
    static SDKName = "{{NameSpaceName}}";
    static SDKVersion = "{{SDKVersion}}";

    static OperationId: Record<string, string> = {
        {%- for method in Methods -%}
        {{method.MethodName}}: "{{method.OperationId}}",
        {%- endfor -%}
    };

    // --- Core Invocation Function ---
{%- for method in Methods -%}

    /**
    * {{method.Document}}
    *
    {%- for param in method.Params -%}
    * @param {{param.TsParameterName}} {{param.Description}}.
    {%- endfor -%}
    * @param timeoutMs Optional timeout in milliseconds. Defaults to DEFAULT_TIMEOUT_MS (30s).
    *                  Set to 0 or negative to disable timeout.
    * @returns A Promise of {{method.ReturnTypeName}}.
    */
    static async {{method.MethodName}}(
        { {% for param in method.Params -%}{{param.TsParameterName}}{%if param.IsRequired == false %} = {%if param.HasDefault %}{{param.DefaultCodeFormat}}{% else %}undefined{% endif %}{% endif %}, {% endfor %}timeoutMs = undefined }: { {% for param in method.Params -%}{{param.TsParameterName}}{% if param.IsRequired == false %}?{% endif %}: {{param.Type}}; {% endfor %}timeoutMs?: number; }
    ): Promise<{{method.ReturnTypeName}}> {
        {%- if method.HasParameter -%}
        const params: any[] = [{% for param in method.Params %}{%- if param.HasDefault == false %}
            { key: "{{param.TsParameterName}}", value: {{param.TsParameterName}} },{% endif %}{% endfor %}
        ];
        {%- for param in method.Params -%}  
        {%- if param.HasDefault -%}
        if({{param.TsParameterName}})params.push({ key: "{{param.TsParameterName}}", value: {{param.TsParameterName}} });
        {%- endif -%}
        {%- endfor -%}
        {%- else -%}
        const params = undefined;
        {%- endif -%}
        const request = createRequest("{{method.OperationId}}", params, timeoutMs);
        const done = await executeCSharp<{{method.ReturnTypeName}}>(request);
        {%- if method.IsReturnTypeMap -%}
        const data = convertTo{{method.ReturnTypeName}}(done);
        return data;
        {%- else -%}
        return done;
        {%- endif -%}
    };

{%- endfor -%}
}


export function createRequest(
    methodName: string,
    params?: any[],
    timeoutMs?: number
) {

    const request = {
        methodName: methodName,
        args: params,
        sdkName: {{ClassName}}.SDKName,
        sdkVersion: {{ClassName}}.SDKVersion,
        timeoutMs: timeoutMs
    };

    return request;
}

function convertToMap<K, V>(data: any): Map<K, V> {
    return new Map(Object.entries(data) as [K, V][]);
}
