/* 
 * {{ NameSpaceName }}
 *
 * Contact: info@ladybug.tools
 */

using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using System.ComponentModel.DataAnnotations;
// using System.Text.Json;
// using System.Text.Json.Serialization;
using LBT.Newtonsoft.Json;
using LBT.Newtonsoft.Json.Converters;
{% if HasCsImports -%}
{% for Package in CsPackages -%}
using {{ Package }};
{% endfor -%}
{% endif -%}

namespace {{ NameSpaceName }}
{
	{%- if HasDescription -%}
    /// <summary>
    /// {{ Description }}
    /// </summary>
	{%- endif -%}
    [Summary(@"{{ Description }}")]
    public {% if IsAbstract %}abstract {% endif %}partial class {{ CsClassName }} {% if HasInheritance %}: {{ Inheritance }}{% endif %}
    {
    {%- if hasOnlyReadOnly == false -%}
        /// <summary>
        /// Initializes a new instance of the <see cref="{{CsClassName}}" /> class.
        /// </summary>
        [LBT.Newtonsoft.Json.JsonConstructorAttribute]
        // [System.Text.Json.Serialization.JsonConstructor] // for future switching to System.Text.Json
        protected {{CsClassName}}() 
        { 
            // Set readonly properties with defaultValue
        {%-  for property in AllProperties -%}
		    {%- if property.IsReadOnly -%}{%- if property.HasDefault -%}
            this.{{ property.CsPropertyName }} = {% if property.HasVeryLongDefault %}{{ property.CsPropertyName }}Default{% else %}{{ property.DefaultCodeFormat }}{% endif %};
            {%- endif -%}{%- endif -%}
        {%- endfor -%}
        }
    {%- endif -%}
        /// <summary>
        /// Initializes a new instance of the <see cref="{{ CsClassName }}" /> class.
        /// </summary>
	{%-  for property in AllProperties -%}
        {%- if property.IsReadOnly == false -%}
        /// <param name="{{ property.CsParameterName }}">{{ property.Description }}</param>
        {%- endif -%}
    {%- endfor -%}
    {%- if hasOnlyReadOnly -%}
        [LBT.Newtonsoft.Json.JsonConstructorAttribute]
        // [System.Text.Json.Serialization.JsonConstructor] // for future switching to System.Text.Json
    {%- endif -%}
        public {{ CsClassName }}
        (
            {% assign skipComma = true -%}{% for property in AllProperties -%}{% if property.IsReadOnly == false %}{% if skipComma %}{% assign skipComma = false %}{% else %}, {% endif %}{{ property.ConstructionParameterCode }}{% endif %}{%- endfor %}
        ){%  if HasInheritance %} : base({% assign skipComma = true %}{% for property in ParentProperties -%}{% if property.IsReadOnly == false %}{% if skipComma %}{% assign skipComma = false %}{% else %}, {% endif %}{{ property.CsParameterName }}: {{ property.CsParameterName }}{% endif %}{%- endfor %}){% endif %}
        {
		{%-  for property in Properties -%}
        {%- if property.IsReadOnly == false -%}
            {%- if property.IsValueType -%}
            this.{{ property.CsPropertyName }} = {{ property.CsParameterName }};
            {%- else -%}
            this.{{ property.CsPropertyName }} = {{ property.CsParameterName }}{% if property.HasDefault %} ?? {% if property.HasVeryLongDefault %}{{ property.CsPropertyName }}Default{% else %}{{ property.DefaultCodeFormat }}{% endif %}{% elsif property.IsRequired %} ?? throw new System.ArgumentNullException("{{ property.CsParameterName }} is a required property for {{ CsClassName }} and cannot be null"){%- endif -%};
            {%- endif -%}
        {%- endif -%}
		{%- endfor -%}

            // Set readonly properties with defaultValue
		{%-  for property in AllProperties -%}
		    {%- if property.IsReadOnly and property.HasDefault -%}
            this.{{ property.CsPropertyName }} = {% if property.HasVeryLongDefault %}{{ property.CsPropertyName }}Default{% else %}{{ property.DefaultCodeFormat }}{% endif %};
            {%- endif -%}
		{%- endfor -%}

        }
	
	{%  for property in Properties %}
        {%- if property.HasVeryLongDefault -%}
        public static readonly {{ property.Type }} {{ property.CsPropertyName }}Default = {{ property.DefaultCodeFormat }};
        {%- endif -%}
        /// <summary>
        /// {{ property.Description }}
        /// </summary>
        [Summary(@"{{ property.Description }}")]{% if property.IsRequired %}
        [Required]{% endif %}{% if property.HasPattern %}
        [RegularExpression(@"{{ property.Pattern }}")]{% endif %}{% if property.HasMaximum or property.HasMinimum %}
        [Range({% if property.HasMinimum %}{{ property.Minimum }}{% else %}{{ property.Type }}.MinValue{% endif %}, {% if property.HasMaximum %}{{ property.Maximum }}{% else %}{{ property.Type }}.MaxValue{% endif %})]{% endif %}{% if property.HasMinLength %}
        [MinLength({{ property.MinLength }})]{% endif %}{% if property.HasMaxLength %}
        [MaxLength({{ property.MaxLength }})]{% endif %}
        [DataMember(Name = "{{ property.CsJsonPropertyNameName }}"{% if property.IsRequired %}, IsRequired = true{% endif %})] // For Newtonsoft.Json
        // [System.Text.Json.Serialization.JsonPropertyName("{{ property.CsJsonPropertyNameName }}")] // For System.Text.Json
        {%- if property.IsRequired == false -%}
        [LBT.Newtonsoft.Json.JsonProperty(NullValueHandling = NullValueHandling.Ignore)] // For Newtonsoft.Json
        // [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]  // For System.Text.Json
        {%- endif -%}
        public {% if property.IsAbstract %}abstract {% endif %}{% if property.IsOverride %}override {% endif %}{{ property.Type }} {{ property.CsPropertyName }} { get;{% if property.IsReadOnly %} protected{% endif %} set; }{% if property.HasDefault %} = {% if property.HasVeryLongDefault %}{{ property.CsPropertyName }}Default{% else %}{{ property.DefaultCodeFormat }}{% endif %};{% endif %}
	{%- endfor -%}


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            return "{{ CsClassName }}";
        }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public {% if HasInheritance %}override{% else %}virtual{% endif %} string ToString(bool detailed)
        {
            if (!detailed)
                return this.ToString();
            
            var sb = new StringBuilder();
            sb.Append("{{ CsClassName }}:\n");
            {%-  for property in AllProperties -%}
            sb.Append("  {{ property.CsPropertyName }}: ").Append(this.{{ property.CsPropertyName }}).Append("\n");
            {%- endfor -%}
            return sb.ToString();
        }


        /// <summary>
        /// Returns the object from JSON string
        /// </summary>
        /// <returns>{{ CsClassName }} object</returns>
        public static {{ CsClassName }} FromJson(string json)
        {
            // var obj = JsonSerializer.Deserialize<{{ CsClassName }}>(json, JsonSetting.SerializerOptions); // For System.Text.Json
            var obj = JsonConvert.DeserializeObject<{{ CsClassName }}>(json, JsonSetting.SerializerOptions);
            return obj;
        }


        {%- if HasInheritance  == false -%} 
        public virtual string ToJson(bool indented = false)
        {
            // For System.Text.Json
            // var options = JsonSetting.SerializerOptions;
            // if (indented)
            //     options.WriteIndented = true;
            // return JsonSerializer.Serialize(this, GetType(), options);

            var format = indented ? Formatting.Indented : Formatting.None;
            return JsonConvert.SerializeObject(this, format, JsonSetting.SerializerOptions);
        }
        {%- endif -%}


    }
}
